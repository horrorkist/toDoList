{"version":3,"sources":["atoms.tsx","theme.ts","components/CreateToDo.tsx","components/ToDoList.tsx","components/SelectCategory.tsx","App.tsx","index.tsx"],"names":["CATEGORY","darkTheme","bgColor","textColor","accentColor","currentBoard","atom","key","default","Number","localStorage","getItem","TODO","toDoState","JSON","parse","toDoSelector","selector","get","toDos","category","filter","toDo","Wrapper","styled","div","CreateToDo","useForm","register","handleSubmit","setValue","board","useRecoilValue","useRecoilState","allToDos","setAllToDos","useEffect","setItem","stringify","onSubmit","oldToDos","text","id","Date","now","required","maxLength","type","placeholder","ToDo","Buttons","ToDoList","onClick","targetIndex","findIndex","slice","map","DOING","DONE","deleteToDo","Label","label","SelectCategory","setBoard","htmlFor","onChange","e","currentTarget","value","name","GlobalStyle","createGlobalStyle","props","theme","Title","App","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.22443816.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum CATEGORY {\n  \"TODO\",\n  \"DOING\",\n  \"DONE\",\n}\n\ninterface IToDo {\n  text: string;\n  id: number;\n  category: CATEGORY;\n}\n\nexport const currentBoard = atom({\n  key: \"board\",\n  default: Number(localStorage.getItem(\"board\")) || CATEGORY.TODO,\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDos\",\n  default:\n    localStorage.getItem(\"toDos\") !== null\n      ? JSON.parse(localStorage.getItem(\"toDos\") || \"\")\n      : [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(currentBoard);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { DefaultTheme } from \"styled-components\";\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"#f5f6fa\",\n  accentColor: \"#9c88ff\",\n};\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n};\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { currentBoard, toDoState } from \"../atoms\";\nimport { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n`;\n\nfunction CreateToDo() {\n  const { register, handleSubmit, setValue } = useForm();\n  const board = useRecoilValue(currentBoard);\n  const [allToDos, setAllToDos] = useRecoilState(toDoState);\n\n  const onSubmit = ({ toDo }: any) => {\n    setAllToDos((oldToDos) => {\n      return [...oldToDos, { text: toDo, id: Date.now(), category: board }];\n    });\n    setValue(\"toDo\", \"\");\n  };\n\n  useEffect(() => {\n    const saveToDos = () => {\n      localStorage.setItem(\"toDos\", JSON.stringify(allToDos));\n    };\n    saveToDos();\n  }, [allToDos]);\n\n  return (\n    <Wrapper>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          {...register(\"toDo\", { required: true, maxLength: 20 })}\n          type=\"text\"\n          placeholder=\"Add a ToDo...\"\n        />\n        <button>Add</button>\n      </form>\n    </Wrapper>\n  );\n}\n\nexport default CreateToDo;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { CATEGORY, toDoSelector, toDoState } from \"../atoms\";\nimport { useEffect } from \"react\";\n\nconst Wrapper = styled.div``;\n\nconst ToDo = styled.div`\n  width: 300px;\n  padding: 10px 20px;\n  border-radius: 20px;\n  height: 100px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: white;\n  border: 1px solid white;\n  margin-bottom: 15px;\n  background-color: #081229;\n  font-size: 20px;\n`;\n\nconst Buttons = styled.div`\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  button {\n    border: none;\n    cursor: pointer;\n  }\n`;\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [allToDos, setAllToDos] = useRecoilState(toDoState);\n\n  const onClick = (id: number, category: CATEGORY) => {\n    const targetIndex = allToDos.findIndex((toDo) => toDo.id === id);\n    setAllToDos((oldToDos) => {\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        {\n          id,\n          text: oldToDos[targetIndex].text,\n          category,\n        },\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n\n  const deleteToDo = (id: number) => {\n    const targetIndex = allToDos.findIndex((toDo) => toDo.id === id);\n    setAllToDos((oldToDos) => {\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n\n  useEffect(() => {\n    const saveToDos = () => {\n      localStorage.setItem(\"toDos\", JSON.stringify(allToDos));\n    };\n    saveToDos();\n  }, [allToDos]);\n\n  return (\n    <Wrapper>\n      {toDos.map((toDo) => (\n        <ToDo key={toDo.id}>\n          <span>{toDo.text}</span>\n          <Buttons>\n            {toDo.category !== CATEGORY.TODO ? (\n              <button onClick={() => onClick(toDo.id, CATEGORY.TODO)}>\n                To Do\n              </button>\n            ) : null}\n            {toDo.category !== CATEGORY.DOING ? (\n              <button onClick={() => onClick(toDo.id, CATEGORY.DOING)}>\n                Doing\n              </button>\n            ) : null}\n            {toDo.category !== CATEGORY.DONE ? (\n              <button onClick={() => onClick(toDo.id, CATEGORY.DONE)}>\n                Done\n              </button>\n            ) : null}\n            <button onClick={() => deleteToDo(toDo.id)}>Delete</button>\n          </Buttons>\n        </ToDo>\n      ))}\n    </Wrapper>\n  );\n}\n\nexport default ToDoList;\n","import styled from \"styled-components\";\nimport { useEffect } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { CATEGORY, currentBoard } from \"../atoms\";\n\nconst Wrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst Label = styled.label`\n  font-size: 20px;\n  color: white;\n`;\n\nfunction SelectCategory() {\n  const [board, setBoard] = useRecoilState(currentBoard);\n  useEffect(() => {\n    const saveCurrentBoard = () => {\n      localStorage.setItem(\"board\", board + \"\");\n    };\n    saveCurrentBoard();\n  }, [board]);\n  return (\n    <Wrapper>\n      <Label htmlFor=\"board\">Category: </Label>\n      <select\n        onChange={(e) => {\n          setBoard(+e.currentTarget.value);\n        }}\n        name=\"board\"\n        id=\"board\"\n        value={board}\n      >\n        <option value={CATEGORY.TODO}>To Do</option>\n        <option value={CATEGORY.DOING}>Doing</option>\n        <option value={CATEGORY.DONE}>Done</option>\n      </select>\n    </Wrapper>\n  );\n}\n\nexport default SelectCategory;\n","import React from \"react\";\nimport styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./theme\";\nimport CreateToDo from \"./components/CreateToDo\";\nimport ToDoList from \"./components/ToDoList\";\nimport SelectCategory from \"./components/SelectCategory\";\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n\tbackground-color: ${(props) => props.theme.bgColor};\n}\n`;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: #212121;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.div`\n  color: whitesmoke;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 32px;\n`;\n\nfunction App() {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <GlobalStyle />\n      <Wrapper>\n        <Title>To Do List</Title>\n        <SelectCategory></SelectCategory>\n        <CreateToDo></CreateToDo>\n        <ToDoList></ToDoList>\n      </Wrapper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}